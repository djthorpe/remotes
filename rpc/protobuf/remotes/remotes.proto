
syntax = "proto3";
package remotes;
option go_package = "remotes";

import "google/protobuf/duration.proto";

/////////////////////////////////////////////////////////////////////
// SERVICES

service Remotes {
	/* READ OPERATIONS */

    // Return array of codecs supported
    rpc Codecs (EmptyRequest) returns (CodecsReply);

	// Return array of keymaps learnt
	rpc KeyMaps (EmptyRequest) returns (KeyMapsReply);

	// Return keys learnt by keymap name
	rpc Keys (KeysRequest) returns (KeysReply);

	// Return all possible keys with one or more search terms
	rpc LookupKeys (LookupKeysRequest) returns (KeysReply);

    // Receive remote events
    rpc Receive (EmptyRequest) returns (stream ReceiveReply);

	// Send a remote scancode
	rpc SendScancode (SendScancodeRequest) returns (EmptyReply);
	
	// Send a remote keycode
	rpc SendKeycode (SendKeycodeRequest) returns (EmptyReply);

	/* WRITE OPERATIONS */

	// Return a new empty keymap
	//rpc CreateKeymap (CreateKeymapRequest) returns (KeymapsReply);

	// Delete a keymap
	//rpc DeleteKeymap (DeleteKeymapRequest) returns (EmptyReply);

	// Set Keymap name
	//rpc SetKeymapName (SetKeymapNameRequest) returns (EmptyReply);

	// Set Keymap key
	//rpc SetKeymapKey (SetKeymapKeyRequest) returns (EmptyReply);

}

/////////////////////////////////////////////////////////////////////
// EMPTY REQUEST AND REPLY

message EmptyRequest { }
message EmptyReply { }

/////////////////////////////////////////////////////////////////////
// ENUMS

enum InputDeviceType {
	INPUT_TYPE_NONE = 0x0000;
	INPUT_TYPE_KEYBOARD = 0x0001;
	INPUT_TYPE_MOUSE = 0x0002;
	INPUT_TYPE_TOUCHSCREEN = 0x0004;
	INPUT_TYPE_JOYSTICK = 0x0008;
	INPUT_TYPE_REMOTE = 0x0010;
}

enum InputEventType {
    INPUT_EVENT_NONE = 0x0000;
    INPUT_EVENT_KEYPRESS = 0x0001;
	INPUT_EVENT_KEYRELEASE = 0x0002;
	INPUT_EVENT_KEYREPEAT = 0x0003;
	INPUT_EVENT_ABSPOSITION = 0x0004;
	INPUT_EVENT_RELPOSITION = 0x0005;
	INPUT_EVENT_TOUCHPRESS = 0x0006;
	INPUT_EVENT_TOUCHRELEASE = 0x0007;
	INPUT_EVENT_TOUCHPOSITION = 0x0008;    
}

enum CodecType {
    CODEC_NONE = 0;
    CODEC_RC5 = 1;
	CODEC_RC5X_20 = 2;
	CODEC_RC5_SZ = 3;
	CODEC_JVC = 4;
	CODEC_SONY12 = 5;
	CODEC_SONY15 = 6;
	CODEC_SONY20 = 7;
	CODEC_NEC16 = 8;
	CODEC_NEC32 = 9;
	CODEC_NECX = 10;
	CODEC_SANYO = 11;
	CODEC_RC6_0 = 12;
	CODEC_RC6_6A_20 = 13;
	CODEC_RC6_6A_24 = 14;
	CODEC_RC6_6A_32 = 15;
	CODEC_RC6_MCE = 16;
	CODEC_SHARP = 17;
	CODEC_APPLETV = 18;
	CODEC_PANASONIC = 19;
}

enum RemoteCode {
	KEYCODE_NONE = 0;
}

/////////////////////////////////////////////////////////////////////
// GEOMETRY

message Point {
    float x = 1;
    float y = 2;
}

/////////////////////////////////////////////////////////////////////
// INPUT EVENT

message InputEvent {
    google.protobuf.Duration ts = 1;
    InputDeviceType device_type = 2;
    InputEventType event_type = 3;
    uint32 device = 7;
	RemoteCode keycode = 6;
    uint32 scancode = 5;
    Point position = 8;
    Point relative = 9;
    uint32 slot = 10;
}

/////////////////////////////////////////////////////////////////////
// KEY MAP & KEY

message KeyMapInfo {
	string name = 1;
	CodecType codec = 2;
	uint32 device = 3;
	uint32 repeats = 4;	
	uint32 keys = 5; // Number of learnt keys
}

message Key {
	string name = 1;
	RemoteCode keycode = 2;
	CodecType codec = 3;
	uint32 device = 4;
	uint32 scancode = 5;
	uint32 repeats = 6;		
}

/////////////////////////////////////////////////////////////////////
// RECEIVE REPLY

message ReceiveReply {
	InputEvent event = 1;
	Key key = 2;
	KeyMapInfo keymap = 3;
}

/////////////////////////////////////////////////////////////////////
// SEND SCANCODE / KEYCODE REQUEST

message SendScancodeRequest {
	CodecType codec = 1;
	uint32 device = 2;
	uint32 scancode = 3;
	uint32 repeats = 4;
}

message SendKeycodeRequest {
	string keymap = 1;
	RemoteCode keycode = 2;
	uint32 repeats = 3;
}

/////////////////////////////////////////////////////////////////////
// CODECS REPLY

message CodecsReply {
    repeated CodecType codec = 1;
}

/////////////////////////////////////////////////////////////////////
// KEYMAPS REPLY

message KeyMapsReply {
	repeated KeyMapInfo keymap = 1;
}

/////////////////////////////////////////////////////////////////////
// LOOKUP ALL KEYS FOR A KEYMAP

message KeysRequest {
	string keymap = 1;
}

message LookupKeysRequest {
	repeated string terms = 1;
}

message KeysReply {
	repeated Key key = 1;	
}
