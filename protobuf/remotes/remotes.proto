
syntax = "proto3";
package mutablelogic;
option go_package = "remotes";

import "google/protobuf/duration.proto";

/////////////////////////////////////////////////////////////////////
// SERVICES

service Remotes {
    // Enumerate codecs
    rpc Codecs (EmptyRequest) returns (CodecsReply);

    // Send a remote scancode
    rpc SendScancode (SendScancodeRequest) returns (EmptyReply);

    // Receive remote events
    rpc Receive (EmptyRequest) returns (stream RemotesReply);
}

/////////////////////////////////////////////////////////////////////
// EMPTY REQUEST AND REPLY

message EmptyRequest { }
message EmptyReply { }

/////////////////////////////////////////////////////////////////////
// ENUMS

enum InputDeviceType {
	INPUT_TYPE_NONE = 0x0000;
	INPUT_TYPE_KEYBOARD = 0x0001;
	INPUT_TYPE_MOUSE = 0x0002;
	INPUT_TYPE_TOUCHSCREEN = 0x0004;
	INPUT_TYPE_JOYSTICK = 0x0008;
	INPUT_TYPE_REMOTE = 0x0010;
}

enum InputEventType {
    INPUT_EVENT_NONE = 0x0000;
    INPUT_EVENT_KEYPRESS = 0x0001;
	INPUT_EVENT_KEYRELEASE = 0x0002;
	INPUT_EVENT_KEYREPEAT = 0x0003;
	INPUT_EVENT_ABSPOSITION = 0x0004;
	INPUT_EVENT_RELPOSITION = 0x0005;
	INPUT_EVENT_TOUCHPRESS = 0x0006;
	INPUT_EVENT_TOUCHRELEASE = 0x0007;
	INPUT_EVENT_TOUCHPOSITION = 0x0008;    
}

/////////////////////////////////////////////////////////////////////
// GEOMETRY

message Point {
    float x = 1;
    float y = 2;
}

/////////////////////////////////////////////////////////////////////
// INPUT EVENT

message InputEvent {
    google.protobuf.Duration ts = 1;
    InputDeviceType device_type = 2;
    InputEventType event_type = 3;
    uint32 scancode = 5;
    uint32 device = 6;
    Point position = 7;
    Point relative = 8;
    uint32 slot = 9;
}

/////////////////////////////////////////////////////////////////////
// REMOTE REPLY

message RemotesReply {
  InputEvent event = 1;
  string codec = 2;
}

/////////////////////////////////////////////////////////////////////
// SEND SCANCODE REQUEST

message SendScancodeRequest {
  uint32 codec = 1;
  uint32 device = 2;
  uint32 scancode = 3;
  uint32 repeats = 4;
}

/////////////////////////////////////////////////////////////////////
// CODECS REPLY

message CodecsReply {
    map<uint32, string> codec = 1;
}
